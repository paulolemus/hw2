{"changed":true,"filter":false,"title":"bankwithlist_jess.cpp","tooltip":"/bankwithlist_jess.cpp","value":"//bankwithlist.cpp\n//Matthew Yamamoto\n//02/24/17\n//This program will be the driver that tests our bank account list\n\n#include<iostream>\n#include \"singlylinked.h\"\n#include \"BasicAccount.h\"\n#include <string>\nusing namespace std; \nusing std::endl;\nusing std::cout;\nusing std::cin;\n\n\n\n// FIXED ADD NODE FUNCTION GOES BENEATH HERE\n//void add(SLinkedList L, BasicAccount b){}\nSNode<BasicAccount>* findByAcct(SNode<BasicAccount>* data, float acct, SLinkedList<BasicAccount>* l){\n    SNode<BasicAccount>* p = l->getHead();  \n    if(p ==NULL){\n        return p; \n    }\n    \n    cout << \"acct is : \" << acct << endl; \n    while(p->data.getAccountNum() != acct){\n        p = p->next;\n    }\n    return p;\n\n}\n\nSNode<BasicAccount>* findByName(SNode<BasicAccount>* data, string nm, SLinkedList<BasicAccount>* l){\n    SNode<BasicAccount>* p = l->getHead();  \n    if(p ==NULL){\n        return p; \n    }\n    \n    cout << \"name is : \" << nm << endl; \n    while(p->data.getName() != nm){\n        p = p->next;\n    }\n    return p;\n\n}\n\ntemplate <typename T>\nSNode<T>* addNewAccount(SLinkedList<BasicAccount>* l, BasicAccount ba){\n    SNode<T>* ptr = l->getHead();\n    if(ptr == NULL){\n        ptr = l.append(ba);\n        return ptr;\n    }\n    while(ptr->data.getAccountNum() < ba.getAccountNum()){\n        ptr = l->advance(ptr, 1);\n        if(!ptr) break;\n    }\n    if(ptr && ptr->data.getAccountNum() == ba.getAccountNum()) return NULL;\n    if(ptr == NULL){\n        ptr = l->append(ba);\n        return ptr;\n    }\n    ptr = l->insert(ba, ptr);\n    return ptr;\n}\n\n\n\n// FIXED ADD NODE FUNCTION GOES BENEATH HERE\n//void add(SLinkedList L, BasicAccount b){}\n\n\nint main(){\n\n\tSLinkedList<BasicAccount> list; //creates a list of type BasicAccount\n   \tchar flag = 'b';\n\n    // MAIN LOOP GOES HERE\n    while(flag != 'q'){\n        cout << \"a = add, f = find, d = delete, q = quit\" << endl;// Greet the teller, prompt what he would like to do\n\tcin >> flag;\n\n\n\tif(flag == 'a'){\n\t\tlong int accnum = 0;\n\t\tstd::string accname;\n\t\tfloat accbalance = 0;\n\t\tcout << \"Please input account number\" << endl;\n\t\tcin >> accnum;\n\t\tcout << \"Please input account name\" << endl;\n\t\tcin >> accname;\n\t\tcout << \"Please input account balance\" << endl;\n\t\tcin >> accbalance;\n\t\tBasicAccount acc = BasicAccount(accnum, accname, accbalance);\n\t\t//add(list, acc);\n\n\t\tlist.append(acc);\n\t\tlist.printAll();\n\n\t\tcout << \"Account added successfully\" << endl;\n\t}\n\tif(flag == 'f'){\n\t\tchar flag2 = 'a';\n\t\tcout << \"Search by name(n) or account id(i)?\" << endl;\n\t\tcin >> flag2;\n\n\t\tif(flag2 == 'n'){\n\t\t    cout << \"What is your name (see hints above^^): \"; \n\t        string name;  \n\t        cin>> name; \n\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); \n            SNode<BasicAccount>* ptr = findByName(ptr1, name, &list);\n            cout<< \"Welcome \"<< ptr->data.getName() << \"!\"<< endl; \n\t\t}\n\n\t\tif(flag2 == 'i'){\n\t\t    cout << \"What is your account number (see hints above^^): \"; \n\t        float a =0; \n\t        cin>> a; \n\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); \n            SNode<BasicAccount>* ptr = findByAcct(ptr1, a, &list);\n            cout<< \"Welcome \"<< ptr->data.getName() << \"!\"<< endl; \n\t\t}\n\n\t\telse{\n\t\tcout << \"Invalid input\" << endl;\n\t\t}\n\t\t\n\t}\n\tif(flag == 'd'){\n\t\tcout << \"Delete by name(n) or account id(i)?\" << endl;\n\t\tchar flag2 = 'a';\n\t\tcin >> flag2;\n\n\t\tif(flag2 == 'n'){\n\t\t    cout << \"What is your name? (see hints above^^): \"; \n\t        string name;  \n\t        cin>> name; \n\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); \n            SNode<BasicAccount>* ptr = findByName(ptr1, name, &list);\n            cout<< \"Erasing \"<< ptr->data.getName() << endl; \n            list.erase(ptr);\n            if (list.getHead()==NULL){\n                cout << \"No More Accounts to delete! Thank you come again\\n\"; \n            } \n\t\t}\n\n\t\tif(flag2 == 'i'){\n\t\t    cout << \"What is your account number? (see hints above^^): \"; \n\t        float acctn =0; \n\t        cin>> acctn; \n\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); \n            SNode<BasicAccount>* ptr = findByAcct(ptr1, acctn, &list);\n            cout<< \"Erasing \"<< ptr->data.getName() << endl; \n            list.erase(ptr);\n            if (list.getHead()==NULL){\n                cout << \"No More Accounts to delete! Thank you come again\\n\"; \n            } \n            // list.printAll(); \n\t\t}\n\t\t\n\t}\n\t\n\t// \"1 - Create account, 2 - Find a customer, 3 - exit\n        \n\n\n        // Create Account:\n        // enter Account ID:\n        // enter Account Name:\n        // Enter new Account balance:\n        // // create ba object, check if the same if exists in list,\n        //          if it exists, return error, continue to next loop\n        //          if it is valid, insert and let teller know success\n\n\n\n        // Create Account:\n        // enter Account ID:\n        // enter Account Name:\n        // Enter new Account balance:\n        // // create ba object, check if the same if exists in list,\n        //          if it exists, return error, continue to next loop\n        //          if it is valid, insert and let teller know success\n\n\n        // Find a customer:\n        // \"would you like to seach by account id or name?\n        // 1 - ID, 2 - name\n        //\n        // ID: \n        //      have user enter id. Give it and the list to jessies \n        //      find by id function.\n        //       \n        //      next prompt user if he would like to withdraw, deposit\n        //      or return.\n        //\n        // name: Same thing as above but use jessies find by name function\n        //\n    }\n\t\n\n    cout << \"\\n\\nGoodbye!\\n\\n\";\n\treturn 0;\n}\n","undoManager":{"mark":14,"position":17,"stack":[[{"start":{"row":149,"column":15},"end":{"row":149,"column":16},"action":"remove","lines":["a"],"id":50}],[{"start":{"row":149,"column":15},"end":{"row":149,"column":16},"action":"insert","lines":["a"],"id":51}],[{"start":{"row":149,"column":16},"end":{"row":149,"column":17},"action":"insert","lines":["c"],"id":52}],[{"start":{"row":149,"column":17},"end":{"row":149,"column":18},"action":"insert","lines":["c"],"id":53}],[{"start":{"row":149,"column":18},"end":{"row":149,"column":19},"action":"insert","lines":["t"],"id":54}],[{"start":{"row":149,"column":19},"end":{"row":149,"column":20},"action":"insert","lines":["n"],"id":55}],[{"start":{"row":150,"column":16},"end":{"row":150,"column":17},"action":"insert","lines":["c"],"id":56}],[{"start":{"row":150,"column":17},"end":{"row":150,"column":18},"action":"insert","lines":["c"],"id":57}],[{"start":{"row":150,"column":18},"end":{"row":150,"column":19},"action":"insert","lines":["t"],"id":58}],[{"start":{"row":150,"column":19},"end":{"row":150,"column":20},"action":"insert","lines":["n"],"id":59}],[{"start":{"row":152,"column":57},"end":{"row":152,"column":58},"action":"insert","lines":["c"],"id":60}],[{"start":{"row":152,"column":58},"end":{"row":152,"column":59},"action":"insert","lines":["c"],"id":61}],[{"start":{"row":152,"column":59},"end":{"row":152,"column":60},"action":"insert","lines":["t"],"id":62}],[{"start":{"row":152,"column":60},"end":{"row":152,"column":61},"action":"insert","lines":["n"],"id":63}],[{"start":{"row":46,"column":0},"end":{"row":46,"column":3},"action":"remove","lines":["// "],"id":64},{"start":{"row":47,"column":0},"end":{"row":47,"column":3},"action":"remove","lines":["// "]},{"start":{"row":48,"column":0},"end":{"row":48,"column":3},"action":"remove","lines":["// "]},{"start":{"row":49,"column":0},"end":{"row":49,"column":3},"action":"remove","lines":["// "]},{"start":{"row":50,"column":0},"end":{"row":50,"column":3},"action":"remove","lines":["// "]},{"start":{"row":51,"column":0},"end":{"row":51,"column":3},"action":"remove","lines":["// "]},{"start":{"row":52,"column":0},"end":{"row":52,"column":3},"action":"remove","lines":["// "]},{"start":{"row":53,"column":0},"end":{"row":53,"column":3},"action":"remove","lines":["// "]},{"start":{"row":54,"column":0},"end":{"row":54,"column":3},"action":"remove","lines":["// "]},{"start":{"row":55,"column":0},"end":{"row":55,"column":3},"action":"remove","lines":["// "]},{"start":{"row":56,"column":0},"end":{"row":56,"column":3},"action":"remove","lines":["// "]},{"start":{"row":57,"column":0},"end":{"row":57,"column":3},"action":"remove","lines":["// "]},{"start":{"row":58,"column":0},"end":{"row":58,"column":3},"action":"remove","lines":["// "]},{"start":{"row":59,"column":0},"end":{"row":59,"column":3},"action":"remove","lines":["// "]},{"start":{"row":60,"column":0},"end":{"row":60,"column":3},"action":"remove","lines":["// "]},{"start":{"row":61,"column":0},"end":{"row":61,"column":3},"action":"remove","lines":["// "]},{"start":{"row":62,"column":0},"end":{"row":62,"column":3},"action":"remove","lines":["// "]},{"start":{"row":63,"column":0},"end":{"row":63,"column":3},"action":"remove","lines":["// "]},{"start":{"row":64,"column":0},"end":{"row":64,"column":3},"action":"remove","lines":["// "]}],[{"start":{"row":47,"column":66},"end":{"row":47,"column":67},"action":"remove","lines":["&"],"id":65}],[{"start":{"row":50,"column":23},"end":{"row":50,"column":24},"action":"insert","lines":["*"],"id":66}],[{"start":{"row":50,"column":23},"end":{"row":50,"column":24},"action":"remove","lines":["*"],"id":67}],[{"start":{"row":0,"column":0},"end":{"row":205,"column":0},"action":"remove","lines":["//bankwithlist.cpp","//Matthew Yamamoto","//02/24/17","//This program will be the driver that tests our bank account list","","#include<iostream>","#include \"singlylinked.h\"","#include \"BasicAccount.h\"","#include <string>","using namespace std; ","using std::endl;","using std::cout;","using std::cin;","","","","// FIXED ADD NODE FUNCTION GOES BENEATH HERE","//void add(SLinkedList L, BasicAccount b){}","SNode<BasicAccount>* findByAcct(SNode<BasicAccount>* data, float acct, SLinkedList<BasicAccount>* l){","    SNode<BasicAccount>* p = l->getHead();  ","    if(p ==NULL){","        return p; ","    }","    ","    cout << \"acct is : \" << acct << endl; ","    while(p->data.getAccountNum() != acct){","        p = p->next;","    }","    return p;","","}","","SNode<BasicAccount>* findByName(SNode<BasicAccount>* data, string nm, SLinkedList<BasicAccount>* l){","    SNode<BasicAccount>* p = l->getHead();  ","    if(p ==NULL){","        return p; ","    }","    ","    cout << \"name is : \" << nm << endl; ","    while(p->data.getName() != nm){","        p = p->next;","    }","    return p;","","}","","template <typename T>","SNode<T>* addNewAccount(SLinkedList<BasicAccount>* l, BasicAccount ba){","    SNode<T>* ptr = l->getHead();","    if(ptr == NULL){","        ptr = l.append(ba);","        return ptr;","    }","    while(ptr->data.getAccountNum() < ba.getAccountNum()){","        ptr = l->advance(ptr, 1);","        if(!ptr) break;","    }","    if(ptr && ptr->data.getAccountNum() == ba.getAccountNum()) return NULL;","    if(ptr == NULL){","        ptr = l->append(ba);","        return ptr;","    }","    ptr = l->insert(ba, ptr);","    return ptr;","}","","","","// FIXED ADD NODE FUNCTION GOES BENEATH HERE","//void add(SLinkedList L, BasicAccount b){}","","","int main(){","","\tSLinkedList<BasicAccount> list; //creates a list of type BasicAccount","   \tchar flag = 'b';","","    // MAIN LOOP GOES HERE","    while(flag != 'q'){","        cout << \"a = add, f = find, d = delete, q = quit\" << endl;// Greet the teller, prompt what he would like to do","\tcin >> flag;","","","\tif(flag == 'a'){","\t\tlong int accnum = 0;","\t\tstd::string accname;","\t\tfloat accbalance = 0;","\t\tcout << \"Please input account number\" << endl;","\t\tcin >> accnum;","\t\tcout << \"Please input account name\" << endl;","\t\tcin >> accname;","\t\tcout << \"Please input account balance\" << endl;","\t\tcin >> accbalance;","\t\tBasicAccount acc = BasicAccount(accnum, accname, accbalance);","\t\t//add(list, acc);","","\t\tlist.append(acc);","\t\tlist.printAll();","","\t\tcout << \"Account added successfully\" << endl;","\t}","\tif(flag == 'f'){","\t\tchar flag2 = 'a';","\t\tcout << \"Search by name(n) or account id(i)?\" << endl;","\t\tcin >> flag2;","","\t\tif(flag2 == 'n'){","\t\t    cout << \"What is your name (see hints above^^): \"; ","\t        string name;  ","\t        cin>> name; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByName(ptr1, name, &list);","            cout<< \"Welcome \"<< ptr->data.getName() << \"!\"<< endl; ","\t\t}","","\t\tif(flag2 == 'i'){","\t\t    cout << \"What is your account number (see hints above^^): \"; ","\t        float a =0; ","\t        cin>> a; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByAcct(ptr1, a, &list);","            cout<< \"Welcome \"<< ptr->data.getName() << \"!\"<< endl; ","\t\t}","","\t\telse{","\t\tcout << \"Invalid input\" << endl;","\t\t}","\t\t","\t}","\tif(flag == 'd'){","\t\tcout << \"Delete by name(n) or account id(i)?\" << endl;","\t\tchar flag2 = 'a';","\t\tcin >> flag2;","","\t\tif(flag2 == 'n'){","\t\t    cout << \"What is your name? (see hints above^^): \"; ","\t        string name;  ","\t        cin>> name; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByName(ptr1, name, &list);","            cout<< \"Erasing \"<< ptr->data.getName() << endl; ","            list.erase(ptr);","            if (list.getHead()==NULL){","                cout << \"No More Accounts to delete! Thank you come again\\n\"; ","            } ","\t\t}","","\t\tif(flag2 == 'i'){","\t\t    cout << \"What is your account number? (see hints above^^): \"; ","\t        float acctn =0; ","\t        cin>> acctn; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByAcct(ptr1, acctn, &list);","            cout<< \"Erasing \"<< ptr->data.getName() << endl; ","            list.erase(ptr);","            if (list.getHead()==NULL){","                cout << \"No More Accounts to delete! Thank you come again\\n\"; ","            } ","            // list.printAll(); ","\t\t}","\t\t","\t}","\t","\t// \"1 - Create account, 2 - Find a customer, 3 - exit","        ","","","        // Create Account:","        // enter Account ID:","        // enter Account Name:","        // Enter new Account balance:","        // // create ba object, check if the same if exists in list,","        //          if it exists, return error, continue to next loop","        //          if it is valid, insert and let teller know success","","","","        // Create Account:","        // enter Account ID:","        // enter Account Name:","        // Enter new Account balance:","        // // create ba object, check if the same if exists in list,","        //          if it exists, return error, continue to next loop","        //          if it is valid, insert and let teller know success","","","        // Find a customer:","        // \"would you like to seach by account id or name?","        // 1 - ID, 2 - name","        //","        // ID: ","        //      have user enter id. Give it and the list to jessies ","        //      find by id function.","        //       ","        //      next prompt user if he would like to withdraw, deposit","        //      or return.","        //","        // name: Same thing as above but use jessies find by name function","        //","    }","\t","","    cout << \"\\n\\nGoodbye!\\n\\n\";","\treturn 0;","}",""],"id":68},{"start":{"row":0,"column":0},"end":{"row":284,"column":0},"action":"insert","lines":["//bankwithlist.cpp","//Matthew Yamamoto","//02/24/17","//This program will be the driver that tests our bank account list","","#include<iostream>","#include \"singlylinked.h\"","#include \"BasicAccount.h\"","#include <string>","using namespace std; ","using std::endl;","using std::cout;","using std::cin;","","","","// FIXED ADD NODE FUNCTION GOES BENEATH HERE","//void add(SLinkedList L, BasicAccount b){}","SNode<BasicAccount>* findByAcct(SNode<BasicAccount>* data, float acct, SLinkedList<BasicAccount>* l){","    SNode<BasicAccount>* p = l->getHead();  ","    if(p ==NULL){","        return p; ","    }","    ","    cout << \"acct is : \" << acct << endl; ","    while(p->data.getAccountNum() != acct){","        p = p->next;","    }","    return p;","","}","","SNode<BasicAccount>* findByName(SNode<BasicAccount>* data, string nm, SLinkedList<BasicAccount>* l){","    SNode<BasicAccount>* p = l->getHead();  ","    if(p ==NULL){","        return p; ","    }","    ","    cout << \"name is : \" << nm << endl; ","    while(p->data.getName() != nm){","        p = p->next;","    }","    return p;","","}","","","// FIXED ADD NODE FUNCTION GOES BENEATH HERE","SNode<BasicAccount>* add(SLinkedList<BasicAccount>* L, SNode<BasicAccount>&b){","\tSNode<BasicAccount>* curr = L->getHead();","\tSNode<BasicAccount>* node = new SNode<BasicAccount>(b);","\t// const SNode<BasicAccount> bval = b; ","\t","\tif(curr == NULL){","\t\t","\t\tcurr = L->append(node);","\t\treturn curr;","\t}","\twhile(curr->data.getAccountNum() < b.getAccountNum()){","\t\tcurr = L->advance(curr, 1);","\t\tif(!curr) break;","\t}\t","\tif(curr && curr->data.getAccountNum() == b.getAccountNum())return NULL;","","\tif(curr == NULL){","\t\tcurr = L->append(b);","\t\treturn curr;","\t}","\tcurr = L->insert(b, curr);","\treturn curr;","}","","","","","","","","","","","","","// FIXED ADD NODE FUNCTION GOES BENEATH HERE","SNode<BasicAccount>* add(SLinkedList<BasicAccount> L, BasicAccount b){","\tSNode<BasicAccount>* curr = L.getHead();","\tif(curr == NULL){","\t\t","\t\tcurr = L.append(b);","\t\treturn curr;","\t}","\twhile(curr->data.getAccountNum() < b.getAccountNum()){","\t\tcurr = L.advance(curr, 1);","\t\tif(!curr) break;","\t}\t","\tif(curr && curr->data.getAccountNum() == b.getAccountNum())return NULL;","","\tif(curr == NULL){","\t\tcurr = L.append(b);","\t\treturn curr;","\t}","\tcurr = L.insert(b, curr);","\treturn curr;","}","","","int main(){","","\tSLinkedList<BasicAccount> list; //creates a list of type BasicAccount","   \tint flag = 10;//flag for add,find,delete","","    // MAIN LOOP GOES HERE","    while(flag != 0){","        cout << \"Welcome, please enter 1 for add, 2 for find, 3 for delete, 0 for quit\" << endl;// Greet the teller, prompt what he would like to do","\tcin >> flag;","","\t//ADD branch, adds accounts that don't have an id already taken","\tif(flag == 1){","\t\tlong int accnum = 0;\t//enter account info","\t\tstd::string accname;","\t\tfloat accbalance = 0;","\t\tSNode<BasicAccount>* ptr;","\t\tcout << \"Please input account number\" << endl;","\t\tcin >> accnum;","\t\tcout << \"Please input account name\" << endl;","\t\tcin >> accname;","\t\tcout << \"Please input account balance\" << endl;","\t\tcin >> accbalance;","\t\tBasicAccount acc = BasicAccount(accnum, accname, accbalance);","\t\tptr = add(list, acc);","\t\tlist.printAll();","\t\tif(ptr == NULL){","\t\t\tcout << \"Adding account failed\" << endl;","\t\t}","\t\telse{","\t\t\tcout << \"Account added successfuly\" << endl;","\t\t\tcout << ptr->data;","\t\t}","\t}","\t//FIND branch, finds an account by name or id, then deposit or withdraw if valid","\tif(flag == 2){","\t\tint flag2 = 0;","\t\tcout << \"Search by name(1) or account id(2)?\" << endl;","\t\tcin >> flag2;","\t\t","\t\t//FIND NAME branch\t","\t\tif(flag2 == 1){","\t\t\tstd::string s1;","\t\t\tcout << \"Please enter name\" << endl;","\t\t\tcin >> s1;","\t\t//\tfindByName();","\t\t\t//VALID NAME","\t\t//\tif(search()){","\t\t\t\tint flag4 = 0;","\t\t\t\tcout << \"Valid account found, would you like to deposit(1) or withdraw(2)?\" << endl;","\t\t\t\tcin >> flag4;","\t\t\t\t//DEPOSIT\t","\t\t\t\tif(flag4 == 1){}","\t\t\t\t//WITHDRAW","\t\t\t\tif(flag4 == 2){}","\t\t//\t}","","\t\t}","\t\t//FIND ID branch","\t\tif(flag2 == 2){","\t\t\tlong int i1;","\t\t\tcout << \"Please enter id\" << endl;","\t\t\tcin >> i1;","\t\t\t//find(i1);//find if id entered matches an account","\t\t\t//account found","\t\t\t//if(){","\t\t\t\tint flag5;","\t\t\t\tcout << \"Valid Account found, would you like to deposit(1), or withdraw(2)\" << endl;","\t\t\t\tcin >> flag5;","\t\t\t\t//Deposit","\t\t\t\tif(flag5 == 1){}","\t\t\t\t//Withdraw","\t\t\t\tif(flag5 == 2){}","\t\t\t","\t\t\t//}","","\t\t}","\t\t//INVALID","\t\tif(flag2 == 'n'){","\t\t    cout << \"What is your name (see hints above^^): \"; ","\t        string name;  ","\t        cin>> name; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByName(ptr1, name, &list);","            cout<< \"Welcome \"<< ptr->data.getName() << \"!\"<< endl; ","\t\t}","","\t\tif(flag2 == 'i'){","\t\t    cout << \"What is your account number (see hints above^^): \"; ","\t        float a =0; ","\t        cin>> a; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByAcct(ptr1, a, &list);","            cout<< \"Welcome \"<< ptr->data.getName() << \"!\"<< endl; ","\t\t}","","\t\telse{","\t\tcout << \"Invalid input\" << endl;","\t\t}","\t\t","\t}","","\t//DELETE branch, find an account by name or id and deletes","\tif(flag == 3){","\t\tint flag3 = 0;","\t\tcout << \"Delete by name(1) or account id(2)?\" << endl;","\t\tcin >> flag3;","\t\t//DELETE by name","\t\tif(flag3 == 1){","\t\t    cout << \"What is your name? (see hints above^^): \"; ","\t        string name;  ","\t        cin>> name; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","\t        SNode<BasicAccount>* ptr = findByName(ptr1, name, &list);","\t        cout<< \"Erasing \"<< ptr->data.getName() << endl; ","\t        list.erase(ptr);","\t        if (list.getHead()==NULL){","\t            cout << \"No More Accounts to delete! Thank you come again\\n\"; ","\t        } ","\t\t}","\t\t//DELETE by id","\t\tif(flag3 == 2){","\t\t\tcout << \"What is your account number? (see hints above^^): \"; ","\t        float acctn =0; ","\t        cin>> acctn; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByAcct(ptr1, acctn, &list);","            cout<< \"Erasing \"<< ptr->data.getName() << endl; ","            list.erase(ptr);","            if (list.getHead()==NULL){","                cout << \"No More Accounts to delete! Thank you come again\\n\"; ","            } ","            // list.printAll(); ","\t\t}","\t\telse{}","\t}","\t","\t// \"1 - Create account, 2 - Find a customer, 3 - exit","        ","","","        // Create Account:","        // enter Account ID:","        // enter Account Name:","        // Enter new Account balance:","        // // create ba object, check if the same if exists in list,","        //          if it exists, return error, continue to next loop","        //          if it is valid, insert and let teller know success","","","","        // Create Account:","        // enter Account ID:","        // enter Account Name:","        // Enter new Account balance:","        // // create ba object, check if the same if exists in list,","        //          if it exists, return error, continue to next loop","        //          if it is valid, insert and let teller know success","","","        // Find a customer:","        // \"would you like to seach by account id or name?","        // 1 - ID, 2 - name","        //","        // ID: ","        //      have user enter id. Give it and the list to jessies ","        //      find by id function.","        //       ","        //      next prompt user if he would like to withdraw, deposit","        //      or return.","        //","        // name: Same thing as above but use jessies find by name function","        //","    }","\t","","    cout << \"\\n\\nGoodbye!\\n\\n\";","\treturn 0;","}",""]}]]},"ace":{"folds":[],"scrolltop":2636,"scrollleft":0,"selection":{"start":{"row":148,"column":0},"end":{"row":158,"column":32},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":168,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1488108691997}
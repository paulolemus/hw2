{"filter":false,"title":"bankwithlist.cpp","tooltip":"/bankwithlist.cpp","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":115,"column":0},"end":{"row":116,"column":18},"action":"remove","lines":["\t\tlist.append(acc);","\t\tlist.printAll();"],"id":2113}],[{"start":{"row":114,"column":20},"end":{"row":115,"column":0},"action":"remove","lines":["",""],"id":2114}],[{"start":{"row":117,"column":1},"end":{"row":117,"column":2},"action":"remove","lines":["\t"],"id":2115}],[{"start":{"row":117,"column":0},"end":{"row":117,"column":1},"action":"remove","lines":["\t"],"id":2116}],[{"start":{"row":116,"column":2},"end":{"row":117,"column":0},"action":"remove","lines":["",""],"id":2117}],[{"start":{"row":116,"column":1},"end":{"row":116,"column":2},"action":"remove","lines":["\t"],"id":2118}],[{"start":{"row":116,"column":0},"end":{"row":116,"column":1},"action":"remove","lines":["\t"],"id":2119}],[{"start":{"row":115,"column":2},"end":{"row":116,"column":0},"action":"remove","lines":["",""],"id":2120}],[{"start":{"row":119,"column":2},"end":{"row":120,"column":18},"action":"insert","lines":["\t\tlist.append(acc);","\t\tlist.printAll();"],"id":2121}],[{"start":{"row":119,"column":3},"end":{"row":119,"column":4},"action":"remove","lines":["\t"],"id":2122}],[{"start":{"row":119,"column":2},"end":{"row":119,"column":3},"action":"remove","lines":["\t"],"id":2123}],[{"start":{"row":124,"column":38},"end":{"row":124,"column":39},"action":"remove","lines":[";"],"id":2124},{"start":{"row":124,"column":38},"end":{"row":125,"column":0},"action":"insert","lines":["",""]},{"start":{"row":125,"column":0},"end":{"row":125,"column":3},"action":"insert","lines":["\t\t\t"]}],[{"start":{"row":125,"column":3},"end":{"row":125,"column":19},"action":"insert","lines":["list.printAll();"],"id":2125}],[{"start":{"row":119,"column":2},"end":{"row":119,"column":5},"action":"insert","lines":["// "],"id":2126},{"start":{"row":120,"column":2},"end":{"row":120,"column":5},"action":"insert","lines":["// "]}],[{"start":{"row":124,"column":38},"end":{"row":124,"column":39},"action":"insert","lines":[";"],"id":2127}],[{"start":{"row":92,"column":12},"end":{"row":92,"column":13},"action":"remove","lines":["1"],"id":2128}],[{"start":{"row":92,"column":12},"end":{"row":92,"column":13},"action":"insert","lines":["0"],"id":2129}],[{"start":{"row":0,"column":0},"end":{"row":301,"column":0},"action":"remove","lines":["//bankwithlist.cpp","//Matthew Yamamoto","//02/24/17","//This program will be the driver that tests our bank account list","","#include<iostream>","#include \"singlylinked.h\"","#include \"BasicAccount.h\"","#include <string>","using namespace std; ","using std::endl;","using std::cout;","using std::cin;","","","","// FIXED ADD NODE FUNCTION GOES BENEATH HERE","//void add(SLinkedList L, BasicAccount b){}","SNode<BasicAccount>* findByAcct(SNode<BasicAccount>* data, float acct, SLinkedList<BasicAccount>* l){","    SNode<BasicAccount>* p = l->getHead();  ","    if(p ==NULL){","        return p; ","    }","    ","    cout << \"acct is : \" << acct << endl; ","    while(p->data.getAccountNum() != acct){","        p = p->next;","    }","    return p;","","}","","SNode<BasicAccount>* findByName(SNode<BasicAccount>* data, string nm, SLinkedList<BasicAccount>* l){","    SNode<BasicAccount>* p = l->getHead();  ","    if(p ==NULL){","        return p; ","    }","    ","    cout << \"name is : \" << nm << endl; ","    while(p->data.getName() != nm){","        p = p->next;","    }","    return p;","","}","","// SNode<BasicAccount>* addToList (SNode<BasicAccount>* data, SLinkedList<BasicAccount>* l){","//     SNode<BasicAccount>* p = l->getHead();  ","//     SNode<BasicAccount>* node = new SNode<BasicAccount>(data);","//     if(p ==NULL){","//         return p; ","//     }","    ","//     cout << \"num is : \" << num << endl; ","//     while(p->data.getAccountNum() < num){","//     \tp = p->next; ","//     }","    ","//     l.append(p); ","//     l.printAll(); ","//     return p;","","// }","","","// // FIXED ADD NODE FUNCTION GOES BENEATH HERE","// SNode<BasicAccount>* add(SLinkedList<BasicAccount> L, BasicAccount b){","// \tSNode<BasicAccount>* curr = L.getHead();","\t","// \tif(curr == NULL){","\t\t","// \t\tcurr = L.append(b);","// \t\treturn curr;","// \t}","// \twhile(curr->data.getAccountNum() < b.getAccountNum()){","// \t\tcurr = L.advance(curr, 1);","// \t\tif(!curr) break;","// \t}\t","// \tif(curr && curr->data.getAccountNum() == b.getAccountNum())return NULL;","","// \tif(curr == NULL){","// \t\tcurr = L.append(b);","// \t\treturn curr;","// \t}","// \tcurr = L.insert(b, curr);","// \treturn curr;","// }","","int main(){","","\tSLinkedList<BasicAccount> list; //creates a list of type BasicAccount","   \tint flag = 10;//flag for add,find,delete","\tint init = 0; ","    // MAIN LOOP GOES HERE","    while(flag != 0){","        cout << \"Welcome, please enter 1 for add, 2 for find, 3 for delete, 0 for quit\" << endl;// Greet the teller, prompt what he would like to do","\tcin >> flag;","\t","\t//ADD branch, adds accounts that don't have an id already taken","\tif(flag == 1){","\t\tlong int accnum = 0;\t//enter account info","\t\tstd::string accname;","\t\tfloat accbalance = 0;","\t\tSNode<BasicAccount>* ptr;","\t\tcout << \"Please input account number\" << endl;","\t\tcin >> accnum;","\t\tcout << \"acc num is: \"<< accnum<< endl; ","\t\tcout << \"Please input account name\" << endl;","\t\tcin >> accname;","\t\tcout << \"Please input account balance\" << endl;","\t\tcin >> accbalance;","\t\t// BasicAccount acc = BasicAccount(accnum, accname, accbalance);","\t\t// ptr = add(&list, acc);","\t\t","\t\tBasicAccount acc; ","\t\tacc.setAccountNum(accnum);","\t\tacc.setName(accname);","\t\tacc.setBalance(accbalance);","\t\t","\t\t// list.append(acc);","\t\t// list.printAll();","\t\t","\t\tif (init == 0){","\t\t\tlist.append(acc);","\t\t\tcout << \"here in if init =0\"<< endl;","\t\t\tlist.printAll();","\t\t}","\t\telse{","\t\t\tcout << \"here in else\"<< endl;","\t\t\tptr = list.getHead();","\t\t\tlist.printAll(); ","\t\t\tfloat apple = ptr->data.getAccountNum(); ","\t\t\tcout << apple<< endl;","\t\t\twhile (accnum< apple){","\t\t\t\tptr = ptr->next; ","\t\t\t\tapple = ptr->data.getAccountNum(); ","\t\t\t}","\t\t\tlist.add(acc, ptr); //adds acc after ptr","\t\t\tlist.printAll(); ","\t\t}","\t\tinit ++;","\t","\t\t","\t\t","\t\t// if ()","\t\t// list.append(acc);","\t\t","\t\t// list.printAll();","\t\tif(ptr == NULL){","\t\t\tcout << \"Adding account failed\" << endl;","\t\t}","\t\telse{","\t\t\tcout << \"Account added successfuly\" << endl;","\t\t\tcout << ptr->data;","\t\t}","\t}","\t//FIND branch, finds an account by name or id, then deposit or withdraw if valid","\tif(flag == 2){","\t\tint flag2 = 0;","\t\tcout << \"Search by name(1) or account id(2)?\" << endl;","\t\tcin >> flag2;","\t\t","\t\t//FIND NAME branch\t","\t\tif(flag2 == 1){","\t\t\tstd::string s1;","\t\t\tcout << \"Please enter name\" << endl;","\t\t\tcin >> s1;","\t\t//\tfindByName();","\t\t\t//VALID NAME","\t\t//\tif(search()){","\t\t\t\tint flag4 = 0;","\t\t\t\tcout << \"Valid account found, would you like to deposit(1) or withdraw(2)?\" << endl;","\t\t\t\tcin >> flag4;","\t\t\t\t//DEPOSIT\t","\t\t\t\tif(flag4 == 1){}","\t\t\t\t//WITHDRAW","\t\t\t\tif(flag4 == 2){}","\t\t//\t}","","\t\t}","\t\t//FIND ID branch","\t\tif(flag2 == 2){","\t\t\tlong int i1;","\t\t\tcout << \"Please enter id\" << endl;","\t\t\tcin >> i1;","\t\t\t//find(i1);//find if id entered matches an account","\t\t\t//account found","\t\t\t//if(){","\t\t\t\tint flag5;","\t\t\t\tcout << \"Valid Account found, would you like to deposit(1), or withdraw(2)\" << endl;","\t\t\t\tcin >> flag5;","\t\t\t\t//Deposit","\t\t\t\tif(flag5 == 1){}","\t\t\t\t//Withdraw","\t\t\t\tif(flag5 == 2){}","\t\t\t","\t\t\t//}","","\t\t}","\t\t//INVALID","\t\tif(flag2 == 'n'){","\t\t    cout << \"What is your name (see hints above^^): \"; ","\t        string name;  ","\t        cin>> name; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByName(ptr1, name, &list);","            cout<< \"Welcome \"<< ptr->data.getName() << \"!\"<< endl; ","\t\t}","","\t\tif(flag2 == 'i'){","\t\t    cout << \"What is your account number (see hints above^^): \"; ","\t        long int a =0; ","\t        cin>> a; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByAcct(ptr1, a, &list);","            cout<< \"Welcome \"<< ptr->data.getName() << \"!\"<< endl; ","\t\t}","","\t\telse{","\t\tcout << \"Invalid input\" << endl;","\t\t}","\t\t","\t}","","\t//DELETE branch, find an account by name or id and deletes","\tif(flag == 3){","\t\tint flag3 = 0;","\t\tcout << \"Delete by name(1) or account id(2)?\" << endl;","\t\tcin >> flag3;","\t\t//DELETE by name","\t\tif(flag3 == 1){","\t\t    cout << \"What is your name? (see hints above^^): \"; ","\t        string name;  ","\t        cin>> name; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","\t        SNode<BasicAccount>* ptr = findByName(ptr1, name, &list);","\t        cout<< \"Erasing \"<< ptr->data.getName() << endl; ","\t        list.erase(ptr);","\t        if (list.getHead()==NULL){","\t            cout << \"No More Accounts to delete! Thank you come again\\n\"; ","\t        } ","\t\t}","\t\t//DELETE by id","\t\tif(flag3 == 2){","\t\t\tcout << \"What is your account number? (see hints above^^): \"; ","\t        long int acctn =0; ","\t        cin>> acctn; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByAcct(ptr1, acctn, &list);","            cout<< \"Erasing \"<< ptr->data.getName() << endl; ","            list.erase(ptr);","            if (list.getHead()==NULL){","                cout << \"No More Accounts to delete! Thank you come again\\n\"; ","            } ","            // list.printAll(); ","\t\t}","\t\telse{}","\t}","\t","\t// \"1 - Create account, 2 - Find a customer, 3 - exit","        ","","","        // Create Account:","        // enter Account ID:","        // enter Account Name:","        // Enter new Account balance:","        // // create ba object, check if the same if exists in list,","        //          if it exists, return error, continue to next loop","        //          if it is valid, insert and let teller know success","","","","        // Create Account:","        // enter Account ID:","        // enter Account Name:","        // Enter new Account balance:","        // // create ba object, check if the same if exists in list,","        //          if it exists, return error, continue to next loop","        //          if it is valid, insert and let teller know success","","","        // Find a customer:","        // \"would you like to seach by account id or name?","        // 1 - ID, 2 - name","        //","        // ID: ","        //      have user enter id. Give it and the list to jessies ","        //      find by id function.","        //       ","        //      next prompt user if he would like to withdraw, deposit","        //      or return.","        //","        // name: Same thing as above but use jessies find by name function","        //","    }","\t","","    cout << \"\\n\\nGoodbye!\\n\\n\";","\treturn 0;","}",""],"id":2130},{"start":{"row":0,"column":0},"end":{"row":0,"column":16},"action":"insert","lines":["list.printAll();"]}],[{"start":{"row":0,"column":15},"end":{"row":0,"column":16},"action":"remove","lines":[";"],"id":2131}],[{"start":{"row":0,"column":14},"end":{"row":0,"column":15},"action":"remove","lines":[")"],"id":2132}],[{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"remove","lines":["("],"id":2133}],[{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"remove","lines":["l"],"id":2134}],[{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"remove","lines":["l"],"id":2135}],[{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"remove","lines":["A"],"id":2136}],[{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"remove","lines":["t"],"id":2137}],[{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"remove","lines":["n"],"id":2138}],[{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"remove","lines":["i"],"id":2139}],[{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"remove","lines":["r"],"id":2140}],[{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"remove","lines":["p"],"id":2141}],[{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"remove","lines":["."],"id":2142}],[{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"remove","lines":["t"],"id":2143}],[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"remove","lines":["s"],"id":2144}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"remove","lines":["i"],"id":2145}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["l"],"id":2146}],[{"start":{"row":0,"column":0},"end":{"row":226,"column":1},"action":"insert","lines":["//bankwithlist.cpp","//Matthew Yamamoto","//02/24/17","//This program will be the driver that tests our bank account list","","#include<iostream>","#include \"singlylinked.h\"","#include \"BasicAccount.h\"","#include <string>","using namespace std; ","using std::endl;","using std::cout;","using std::cin;","","","","// FIXED ADD NODE FUNCTION GOES BENEATH HERE","//void add(SLinkedList L, BasicAccount b){}","SNode<BasicAccount>* findByAcct(SNode<BasicAccount>* data, float acct, SLinkedList<BasicAccount>* l){","    SNode<BasicAccount>* p = l->getHead();  ","    if(p ==NULL){","        return p; ","    }","    ","    cout << \"acct is : \" << acct << endl; ","    while(p->data.getAccountNum() != acct){","        p = p->next;","    }","    return p;","","}","","SNode<BasicAccount>* findByName(SNode<BasicAccount>* data, string nm, SLinkedList<BasicAccount>* l){","    SNode<BasicAccount>* p = l->getHead();  ","    if(p ==NULL){","        return p; ","    }","    ","    cout << \"name is : \" << nm << endl; ","    while(p->data.getName() != nm){","        p = p->next;","    }","    return p;","","}","","","","// FIXED ADD NODE FUNCTION GOES BENEATH HERE","SNode<BasicAccount>* addNewAccount(SLinkedList<BasicAccount>& L, BasicAccount& b){","\tSNode<BasicAccount>* curr = L.getHead();","\tif(curr == NULL){","\t\tcurr = L.append(b);","\t\treturn curr;","\t}","\twhile(curr->data.getAccountNum() < b.getAccountNum()){","\t\tcurr = L.advance(curr, 1);","\t\tif(!curr) break;","\t}\t","\tif(curr && curr->data.getAccountNum() == b.getAccountNum())return NULL;","","\tif(curr == NULL){","\t\tcurr = L.append(b);","\t\treturn curr;","\t}","\tcurr = L.insert(b, curr);","\treturn curr;","}","","","int main(){","","\tSLinkedList<BasicAccount> list; //creates a list of type BasicAccount","   \tint flag = 10;//flag for add,find,delete","","    // MAIN LOOP GOES HERE","    while(flag != 0){","        cout << \"Welcome, please enter 1 for add, 2 for find, 3 for delete, 0 for quit\" << endl;// Greet the teller, prompt what he would like to do","\tcin >> flag;","","\t//ADD branch, adds accounts that don't have an id already taken","\tif(flag == 1){","\t\tlong int accnum = 0;\t//enter account info","\t\tstd::string accname;","\t\tfloat accbalance = 0;","\t\tSNode<BasicAccount>* ptr;","\t\tcout << \"Please input account number\" << endl;","\t\tcin >> accnum;","\t\tcout << \"Please input account name\" << endl;","\t\tcin >> accname;","\t\tcout << \"Please input account balance\" << endl;","\t\tcin >> accbalance;","\t\tBasicAccount ba(accnum, accname, accbalance);","\t\tptr = addNewAccount(list, ba);\t","\t\tif(ptr == NULL){","\t\t\tcout << \"Adding account failed\" << endl;","\t\t}","\t\telse{","\t\t\tcout << \"Account added successfuly\" << endl;","\t\t\tcout << ptr->data;","\t\t}","\t\tcout << \"\\nPress Enter to continue\";","\t\tcin.ignore();","\t\tcin.get();","\t}","\t//FIND branch, finds an account by name or id, then deposit or withdraw if valid","\tif(flag == 2){","\t\tint flag2 = 0;","\t\tcout << \"Search by name(1) or account id(2)?\" << endl;","\t\tcin >> flag2;","\t\t","\t\t//FIND NAME branch\t","\t\tif(flag2 == 1){","\t\t\tstd::string s1;","\t\t\tcout << \"Please enter name\" << endl;","\t\t\tcin >> s1;","\t\t//\tfindByName();","\t\t\t//VALID NAME","\t\t//\tif(search()){","\t\t\t\tint flag4 = 0;","\t\t\t\tcout << \"Valid account found, would you like to deposit(1) or withdraw(2)?\" << endl;","\t\t\t\tcin >> flag4;","\t\t\t\t//DEPOSIT\t","\t\t\t\tif(flag4 == 1){}","\t\t\t\t//WITHDRAW","\t\t\t\tif(flag4 == 2){}","\t\t//\t}","","\t\t}","\t\t//FIND ID branch","\t\tif(flag2 == 2){","\t\t\tlong int i1;","\t\t\tcout << \"Please enter id\" << endl;","\t\t\tcin >> i1;","\t\t\t//find(i1);//find if id entered matches an account","\t\t\t//account found","\t\t\t//if(){","\t\t\t\tint flag5;","\t\t\t\tcout << \"Valid Account found, would you like to deposit(1), or withdraw(2)\" << endl;","\t\t\t\tcin >> flag5;","\t\t\t\t//Deposit","\t\t\t\tif(flag5 == 1){}","\t\t\t\t//Withdraw","\t\t\t\tif(flag5 == 2){}","\t\t\t","\t\t\t//}","","\t\t}","\t\t//INVALID","\t\tif(flag2 == 'n'){","\t\t    cout << \"What is your name (see hints above^^): \"; ","\t        string name;  ","\t        cin>> name; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByName(ptr1, name, &list);","            cout<< \"Welcome \"<< ptr->data.getName() << \"!\"<< endl; ","\t\t}","","\t\tif(flag2 == 'i'){","\t\t    cout << \"What is your account number (see hints above^^): \"; ","\t        float a =0; ","\t        cin>> a; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByAcct(ptr1, a, &list);","            cout<< \"Welcome \"<< ptr->data.getName() << \"!\"<< endl; ","\t\t}","","\t\telse{","\t\tcout << \"Invalid input\" << endl;","\t\t}","\t\t","\t}","","\t//DELETE branch, find an account by name or id and deletes","\tif(flag == 3){","\t\tint flag3 = 0;","\t\tcout << \"Delete by name(1) or account id(2)?\" << endl;","\t\tcin >> flag3;","\t\t//DELETE by name","\t\tif(flag3 == 1){}","\t\t//DELETE by id","\t\tif(flag3 == 2){}","\t\telse{}","\t}","\t","\t// \"1 - Create account, 2 - Find a customer, 3 - exit","        ","","","        // Create Account:","        // enter Account ID:","        // enter Account Name:","        // Enter new Account balance:","        // // create ba object, check if the same if exists in list,","        //          if it exists, return error, continue to next loop","        //          if it is valid, insert and let teller know success","","","","        // Create Account:","        // enter Account ID:","        // enter Account Name:","        // Enter new Account balance:","        // // create ba object, check if the same if exists in list,","        //          if it exists, return error, continue to next loop","        //          if it is valid, insert and let teller know success","","","        // Find a customer:","        // \"would you like to seach by account id or name?","        // 1 - ID, 2 - name","        //","        // ID: ","        //      have user enter id. Give it and the list to jessies ","        //      find by id function.","        //       ","        //      next prompt user if he would like to withdraw, deposit","        //      or return.","        //","        // name: Same thing as above but use jessies find by name function","        //","    }","\t","","    cout << \"\\n\\nGoodbye!\\n\\n\";","\treturn 0;","}"],"id":2147}],[{"start":{"row":226,"column":1},"end":{"row":227,"column":0},"action":"insert","lines":["",""],"id":2148}],[{"start":{"row":227,"column":0},"end":{"row":227,"column":1},"action":"insert","lines":[":"],"id":2149}],[{"start":{"row":227,"column":1},"end":{"row":227,"column":2},"action":"insert","lines":["w"],"id":2150}],[{"start":{"row":227,"column":2},"end":{"row":227,"column":3},"action":"insert","lines":["q"],"id":2151}],[{"start":{"row":227,"column":3},"end":{"row":228,"column":0},"action":"insert","lines":["",""],"id":2152}],[{"start":{"row":227,"column":3},"end":{"row":228,"column":0},"action":"remove","lines":["",""],"id":2153}],[{"start":{"row":227,"column":2},"end":{"row":227,"column":3},"action":"remove","lines":["q"],"id":2154}],[{"start":{"row":227,"column":1},"end":{"row":227,"column":2},"action":"remove","lines":["w"],"id":2155}],[{"start":{"row":227,"column":0},"end":{"row":227,"column":1},"action":"remove","lines":[":"],"id":2156}],[{"start":{"row":226,"column":1},"end":{"row":227,"column":0},"action":"remove","lines":["",""],"id":2157}],[{"start":{"row":226,"column":1},"end":{"row":227,"column":0},"action":"insert","lines":["",""],"id":2158}],[{"start":{"row":99,"column":21},"end":{"row":100,"column":0},"action":"insert","lines":["",""],"id":2159},{"start":{"row":100,"column":0},"end":{"row":100,"column":3},"action":"insert","lines":["\t\t\t"]}],[{"start":{"row":100,"column":3},"end":{"row":100,"column":4},"action":"insert","lines":["l"],"id":2160}],[{"start":{"row":100,"column":4},"end":{"row":100,"column":5},"action":"insert","lines":["i"],"id":2161}],[{"start":{"row":100,"column":5},"end":{"row":100,"column":6},"action":"insert","lines":["s"],"id":2162}],[{"start":{"row":100,"column":6},"end":{"row":100,"column":7},"action":"insert","lines":["t"],"id":2163}],[{"start":{"row":100,"column":7},"end":{"row":100,"column":8},"action":"insert","lines":["."],"id":2164}],[{"start":{"row":100,"column":8},"end":{"row":100,"column":9},"action":"insert","lines":["p"],"id":2165}],[{"start":{"row":100,"column":9},"end":{"row":100,"column":10},"action":"insert","lines":["r"],"id":2166}],[{"start":{"row":100,"column":10},"end":{"row":100,"column":11},"action":"insert","lines":["i"],"id":2167}],[{"start":{"row":100,"column":11},"end":{"row":100,"column":12},"action":"insert","lines":["n"],"id":2168}],[{"start":{"row":100,"column":12},"end":{"row":100,"column":13},"action":"insert","lines":["t"],"id":2169}],[{"start":{"row":100,"column":8},"end":{"row":100,"column":13},"action":"remove","lines":["print"],"id":2170},{"start":{"row":100,"column":8},"end":{"row":100,"column":18},"action":"insert","lines":["printAll()"]}],[{"start":{"row":101,"column":3},"end":{"row":101,"column":4},"action":"insert","lines":[";"],"id":2171}],[{"start":{"row":101,"column":3},"end":{"row":101,"column":4},"action":"remove","lines":[";"],"id":2172}],[{"start":{"row":100,"column":18},"end":{"row":100,"column":19},"action":"insert","lines":[";"],"id":2173}],[{"start":{"row":100,"column":3},"end":{"row":100,"column":19},"action":"remove","lines":["list.printAll();"],"id":2174}],[{"start":{"row":180,"column":17},"end":{"row":182,"column":2},"action":"insert","lines":["","\t\t\t","\t\t"],"id":2175}],[{"start":{"row":181,"column":3},"end":{"row":182,"column":0},"action":"insert","lines":["",""],"id":2176},{"start":{"row":182,"column":0},"end":{"row":182,"column":3},"action":"insert","lines":["\t\t\t"]}],[{"start":{"row":182,"column":3},"end":{"row":183,"column":0},"action":"insert","lines":["",""],"id":2177},{"start":{"row":183,"column":0},"end":{"row":183,"column":3},"action":"insert","lines":["\t\t\t"]}],[{"start":{"row":181,"column":2},"end":{"row":181,"column":3},"action":"insert","lines":["\t"],"id":2178}],[{"start":{"row":181,"column":3},"end":{"row":190,"column":14},"action":"insert","lines":["cout << \"What is your name? (see hints above^^): \"; ","\t        string name;  ","\t        cin>> name; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByName(ptr1, name, &list);","            cout<< \"Erasing \"<< ptr->data.getName() << endl; ","            list.erase(ptr);","            if (list.getHead()==NULL){","                cout << \"No More Accounts to delete! Thank you come again\\n\"; ","            } "],"id":2179}],[{"start":{"row":192,"column":2},"end":{"row":192,"column":3},"action":"remove","lines":["\t"],"id":2180}],[{"start":{"row":192,"column":1},"end":{"row":192,"column":2},"action":"remove","lines":["\t"],"id":2181}],[{"start":{"row":192,"column":0},"end":{"row":192,"column":1},"action":"remove","lines":["\t"],"id":2182}],[{"start":{"row":191,"column":3},"end":{"row":192,"column":0},"action":"remove","lines":["",""],"id":2183}],[{"start":{"row":191,"column":2},"end":{"row":191,"column":3},"action":"remove","lines":["\t"],"id":2184}],[{"start":{"row":191,"column":1},"end":{"row":191,"column":2},"action":"remove","lines":["\t"],"id":2185}],[{"start":{"row":191,"column":0},"end":{"row":191,"column":1},"action":"remove","lines":["\t"],"id":2186}],[{"start":{"row":190,"column":15},"end":{"row":191,"column":0},"action":"remove","lines":["",""],"id":2187}],[{"start":{"row":193,"column":17},"end":{"row":195,"column":2},"action":"insert","lines":["","\t\t\t","\t\t"],"id":2188}],[{"start":{"row":194,"column":3},"end":{"row":204,"column":32},"action":"insert","lines":["\t\t    cout << \"What is your account number? (see hints above^^): \"; ","\t        float acctn =0; ","\t        cin>> acctn; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByAcct(ptr1, acctn, &list);","            cout<< \"Erasing \"<< ptr->data.getName() << endl; ","            list.erase(ptr);","            if (list.getHead()==NULL){","                cout << \"No More Accounts to delete! Thank you come again\\n\"; ","            } ","            // list.printAll(); "],"id":2189}],[{"start":{"row":194,"column":8},"end":{"row":194,"column":9},"action":"remove","lines":[" "],"id":2190}],[{"start":{"row":194,"column":7},"end":{"row":194,"column":8},"action":"remove","lines":[" "],"id":2191}],[{"start":{"row":194,"column":6},"end":{"row":194,"column":7},"action":"remove","lines":[" "],"id":2192}],[{"start":{"row":194,"column":5},"end":{"row":194,"column":6},"action":"remove","lines":[" "],"id":2193}],[{"start":{"row":194,"column":4},"end":{"row":194,"column":5},"action":"remove","lines":["\t"],"id":2194}],[{"start":{"row":194,"column":3},"end":{"row":194,"column":4},"action":"remove","lines":["\t"],"id":2195}],[{"start":{"row":204,"column":12},"end":{"row":204,"column":15},"action":"remove","lines":["// "],"id":2196}],[{"start":{"row":204,"column":29},"end":{"row":204,"column":30},"action":"insert","lines":["/"],"id":2197}],[{"start":{"row":204,"column":30},"end":{"row":204,"column":31},"action":"insert","lines":["/"],"id":2198}],[{"start":{"row":204,"column":31},"end":{"row":204,"column":32},"action":"insert","lines":["d"],"id":2199}],[{"start":{"row":204,"column":32},"end":{"row":204,"column":33},"action":"insert","lines":["e"],"id":2200}],[{"start":{"row":204,"column":33},"end":{"row":204,"column":34},"action":"insert","lines":["b"],"id":2201}],[{"start":{"row":204,"column":34},"end":{"row":204,"column":35},"action":"insert","lines":["u"],"id":2202}],[{"start":{"row":204,"column":35},"end":{"row":204,"column":36},"action":"insert","lines":["g"],"id":2203}],[{"start":{"row":77,"column":0},"end":{"row":78,"column":0},"action":"insert","lines":["\t    cout << \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\";",""],"id":2206,"ignore":true},{"start":{"row":96,"column":33},"end":{"row":96,"column":63},"action":"insert","lines":[", account number already taken"]},{"start":{"row":118,"column":0},"end":{"row":118,"column":18},"action":"remove","lines":["\t\t//\tfindByName();"]},{"start":{"row":120,"column":8},"end":{"row":120,"column":15},"action":"remove","lines":["search("]},{"start":{"row":120,"column":8},"end":{"row":120,"column":27},"action":"insert","lines":["findByName(s1, list"]},{"start":{"row":122,"column":0},"end":{"row":124,"column":0},"action":"insert","lines":["\t\t\t\tfloat ammount = 0;","\t\t\t//\tcout << findByName(s1, list)->data;",""]},{"start":{"row":127,"column":19},"end":{"row":129,"column":19},"action":"remove","lines":["}","\t\t\t\t//WITHDRAW","\t\t\t\tif(flag4 == 2){"]},{"start":{"row":127,"column":19},"end":{"row":139,"column":4},"action":"insert","lines":["","\t\t\t\t\tcout << \"How much would you like to deposit?\" << endl;","\t\t\t\t\tcin >> ammount;","\t\t\t//\t\tfindByName(s1, list)->data.deposit(ammount);","","\t\t\t\t}","\t\t\t\t//WITHDRAW","\t\t\t\tif(flag4 == 2){","\t\t\t\t\tcout << \"How much would you like to deposit?\" << endl;","\t\t\t\t\tcin >> ammount;","\t\t\t//\t\tfindByName(s1, list)->data.deposit(ammount);","","\t\t\t\t"]},{"start":{"row":162,"column":0},"end":{"row":185,"column":0},"action":"remove","lines":["\t\t//INVALID","\t\tif(flag2 == 'n'){","\t\t    cout << \"What is your name (see hints above^^): \"; ","\t        string name;  ","\t        cin>> name; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByName(ptr1, name, &list);","            cout<< \"Welcome \"<< ptr->data.getName() << \"!\"<< endl; ","\t\t}","","\t\tif(flag2 == 'i'){","\t\t    cout << \"What is your account number (see hints above^^): \"; ","\t        float a =0; ","\t        cin>> a; ","\t\t    SNode<BasicAccount>* ptr1 = list.getHead(); ","            SNode<BasicAccount>* ptr = findByAcct(ptr1, a, &list);","            cout<< \"Welcome \"<< ptr->data.getName() << \"!\"<< endl; ","\t\t}","","\t\telse{","\t\tcout << \"Invalid input\" << endl;","\t\t}","\t\t",""]},{"start":{"row":171,"column":0},"end":{"row":172,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":196,"column":0},"end":{"row":216,"column":19},"action":"remove","lines":["\t\t}","\t\telse{}","\t}","\t","\t// \"1 - Create account, 2 - Find a customer, 3 - exit","        ","","","        // Create Account:","        // enter Account ID:","        // enter Account Name:","        // Enter new Account balance:","        // // create ba object, check if the same if exists in list,","        //          if it exists, return error, continue to next loop","        //          if it is valid, insert and let teller know success","","","","        // Create Account:","        // enter Account ID:","        // enter Ac"]},{"start":{"row":196,"column":0},"end":{"row":205,"column":3},"action":"insert","lines":["=======","\t\t\tstring s2;","\t\t\tcout << \"Please enter name\" << endl;","\t\t\tcin >> s2;","\t\t//\tlist.erase(findByName(list, s2));","\t\t}","\t\t//DELETE by id","\t\tif(flag3 == 2){","\t\t\tlong int lint;","\t\t\t"]},{"start":{"row":205,"column":6},"end":{"row":205,"column":7},"action":"remove","lines":["n"]},{"start":{"row":205,"column":8},"end":{"row":207,"column":16},"action":"remove","lines":["Name:","        // Enter new Account balance:","        // // cr"]},{"start":{"row":205,"column":8},"end":{"row":205,"column":14},"action":"insert","lines":["<< \"Pl"]},{"start":{"row":205,"column":16},"end":{"row":205,"column":17},"action":"remove","lines":["t"]},{"start":{"row":205,"column":16},"end":{"row":205,"column":17},"action":"insert","lines":["s"]},{"start":{"row":205,"column":19},"end":{"row":222,"column":10},"action":"remove","lines":["ba object, check if the same if exists in list,","        //          if it exists, return error, continue to next loop","        //          if it is valid, insert and let teller know success","","","        // Find a customer:","        // \"would you like to seach by account id or name?","        // 1 - ID, 2 - name","        //","        // ID: ","        //      have user enter id. Give it and the list to jessies ","        //      find by id function.","        //       ","        //      next prompt user if he would like to withdraw, deposit","        //      or return.","        //","        // name: Same thing as above but use jessies find by name function","        //"]},{"start":{"row":205,"column":19},"end":{"row":212,"column":1},"action":"insert","lines":["enter id\" << endl;","\t\t\tcin >> lint;","\t\t//\tlist.erase(findByAcct(lint,list);",">>>>>>> refs/remotes/origin/master","\t\t}","\t\telse{}","\t}","\t"]}],[{"start":{"row":181,"column":14},"end":{"row":181,"column":15},"action":"remove","lines":["\t"],"id":2204},{"start":{"row":181,"column":14},"end":{"row":182,"column":0},"action":"insert","lines":["",""]},{"start":{"row":182,"column":0},"end":{"row":182,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":171,"column":0},"end":{"row":171,"column":12},"action":"remove","lines":["<<<<<<< HEAD"],"id":2207}],[{"start":{"row":197,"column":0},"end":{"row":197,"column":7},"action":"remove","lines":["======="],"id":2208}],[{"start":{"row":209,"column":0},"end":{"row":209,"column":34},"action":"remove","lines":[">>>>>>> refs/remotes/origin/master"],"id":2209}],[{"start":{"row":198,"column":0},"end":{"row":201,"column":38},"action":"remove","lines":["\t\t\tstring s2;","\t\t\tcout << \"Please enter name\" << endl;","\t\t\tcin >> s2;","\t\t//\tlist.erase(findByName(list, s2));"],"id":2210}],[{"start":{"row":197,"column":0},"end":{"row":198,"column":0},"action":"remove","lines":["",""],"id":2211}],[{"start":{"row":196,"column":36},"end":{"row":197,"column":0},"action":"remove","lines":["",""],"id":2212}],[{"start":{"row":198,"column":0},"end":{"row":205,"column":3},"action":"remove","lines":["\t\t//DELETE by id","\t\tif(flag3 == 2){","\t\t\tlong int lint;","\t\t\tcout << \"Please enter id\" << endl;","\t\t\tcin >> lint;","\t\t//\tlist.erase(findByAcct(lint,list);","","\t\t}"],"id":2213}],[{"start":{"row":77,"column":42},"end":{"row":77,"column":64},"action":"remove","lines":["\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"],"id":2214}]]},"ace":{"folds":[],"scrolltop":1080.5,"scrollleft":24,"selection":{"start":{"row":77,"column":42},"end":{"row":77,"column":42},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":55,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1488115612016,"hash":"854fa92bfc62638a6a9f151d1ef4abe0f13cc2c8"}